(
	(import lists)
	(import lists-ext)
	(import record)
	(import switch)

	(def vis-record # :: (
		(record vis [locations root minx miny maxx maxy visual done] (dict
			(tuple locations [])
			(tuple minx (- 1))
			(tuple miny (- 1))
			(tuple maxx 1)
			(tuple maxy 1)
			(tuple visual [])
			(tuple done [])
		))
	))

	(def vis-new #Location,Locations :: (
		(record-set (vis-record) (dict
			(tuple locations Locations)
			(tuple root      Location)
		))
	))

	(def visualise #Vis0 :: (
		(var Result  (map-location (record-get Vis0 root) (tuple 0 0) Vis0))
		(var Vis1    (index Result 0))
		(var Actions (index Result 1))
		(var Vis2    (map-loop Vis1 Actions))
		(var XSeq    (seq (record-get Vis2 minx) (record-get Vis2 maxx)))
		(var YSeq    (seq (record-get Vis2 miny) (record-get Vis2 maxy)))
		(var Handler (scope #Y :: (
			(var Handler2 (scope #X :: (
				(switch (lkeyfind (tuple X Y) (record-get Vis2 visual)) [
					(case false # :: ((".")))
					(default #Tile :: ((index Tile 1)))
				])
			)))
			(++ (lcomp Handler2 [XSeq]) ["\n"])
		)))
		(lcomp Handler [YSeq])
	))

	(def map-loop #Vis0,Actions :: (
		(if (== 0 (length Actions)) (
			(Vis0)
		) (else (
			(var Hd (head Actions))
			(var Result (map-location (index Hd 0) (index Hd 1) Vis0 (index Hd 2)))
			(var Vis1 (index Result 0))
			(var ActionsNew (index Result 1))
			(recurse map-loop Vis1 (++ ActionsNew (tail Actions)))
		)))
	))

	(def map-location #Location,Pos,Vis :: ((next map-location Location Pos Vis nil)))
	(def map-location #Location,Pos,Vis,Prev :: (
		(if (is-done Vis Pos) (
			(tuple Vis [])
		) (else (
			(next do-map-location Location Pos Vis Prev)
		)))
	))

	% Dummy
	(def loc-tile # :: ((".")))
	(def loc-neighbour # :: ((false)))

	(def do-map-location #Location,Pos,Vis0,Prev0 :: (
		(var X (index Pos 0))
		(var Y (index Pos 1))
		(var Prev1 (? (== nil Prev0) (location-id Location) Prev0))
		(var Tile (loc-tile Location))
		(var Visual1 (++ [(tuple Pos Tile)] Vis0))
		(var Visual2 (maybe-map-borders Location Pos Vis0 Visual1))
		(var Vis1 (record-set Vis0 done (++ [(tuple Pos done)] (record-get Vis0 done))))
		(var Vis1 (record-set Vis1 minx (? (< (- X 1) (record-get Vis1 minx)) (- X 1) (record-get Vis1 minx))))
		(var Vis1 (record-set Vis1 miny (? (< (- Y 1) (record-get Vis1 miny)) (- Y 1) (record-get Vis1 miny))))
		(var Vis1 (record-set Vis1 maxx (? (> (+ X 1) (record-get Vis1 maxx)) (+ X 1) (record-get Vis1 maxx))))
		(var Vis1 (record-set Vis1 maxy (? (> (+ Y 1) (record-get Vis1 maxy)) (+ Y 1) (record-get Vis1 maxy))))
		(var Actions (foldl (directions) [] (scope #Directions,ActionsAcc :: (
			(switch (loc-neighbour Direction Location) [
				(case false # :: ((ActionsAcc)))
				(default (scope #N :: (
					(var Id (record-get Neighbour id))
					(if (!= Id Prev1) (
						(var Result (lkeyfind Id 1 (record-get Vis1 locations)))
						(var Neighbour (index N 1))
						(var Position (position oc-position Direction Pos))
						(++ [(tuple Neighbour Position Prev1)] ActionsAcc)
					) (else (
						(ActionsAcc)
					)))
				)))
			])
		))))
		(tuple Vis1 Actions)
	))

	(def is-done #Vis,Pos :: (
		(var Lookup (lkeyfind Pos 1 (record-get Vis done)))
		(if (== false Lookup) ((atom true)) (else (
			(== (inspect Lookup) (inspect (tuple Pos done)))
		)))
	))

	(var V (vis-new x [x y]))
	(print (join (flatten (visualise V)) ""))

