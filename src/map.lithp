% DOL - Map module
%
% Manages a map and proxy rendering.
%
(
	(import lists)
	(import switch)

	% Shorthand directions
	(def direction #Shorthand :: (
		(switch Shorthand [
			(case "n" # :: ((atom north)))
			(case "s" # :: ((atom south)))
			(case "e" # :: ((atom east)))
			(case "w" # :: ((atom west)))
			(case "u" # :: ((atom up)))
			(case "d" # :: ((atom down)))
		])
	))
	
	(def opposite #Direction :: (
		(switch Direction [
			(case north # :: ((atom south)))
			(case south # :: ((atom north)))
			(case east  # :: ((atom west)))
			(case west  # :: ((atom east)))
			(case up    # :: ((atom down)))
			(case down  # :: ((atom up)))
		])
	))

	(def position #Pos,X,Y :: (
		(switch Pos [
			(case north     # :: ([X (- Y 1))])
			(case south     # :: ([X (+ Y 1))])
			(case east      # :: ([(+ X 1) Y)])
			(case west      # :: ([(- X 1) Y)])
			(case northeast # :: ([(+ X 1) (- Y 1))])
			(case southeast # :: ([(+ X 1) (+ Y 1))])
			(case southwest # :: ([(- X 1) (+ Y 1))])
			(case northwest # :: ([(- X 1) (- Y 1))])
		])
	))

	(var Directions [north south east west northeast southeast southwest northwest])
	(var AllDirection [north south east west northeast southeast southwest northwest up down])

	(var Rooms (dict))
	(var RoomIdCounter 0)
	(def room-id (scope # :: (
		(var Value (get RoomIdCounter))
		(set RoomIdCounter (+ 1 (get RoomIdCounter)))
		(get Value)
	)))

	(def room #Id,Title :: ((room Id Title "")))
	(def room #Id,Title,Description :: ((room Id Title Description (dict))))
	(def room #Id,Title,Description,Exits :: ((room Id Title Description Exits " ")))
	(def room (scope #Id,Title,Description,Exits,Tile :: (
		(var Room (dict
			(tuple id Id)
			(tuple title Title)
			(tuple description Description)
			(tuple exits Exits)
			(tuple tile Tile)
			(tuple art (dict))
			(tuple contents [])
		))
		(dict-set Rooms Id Room)
		(get Room)
	)))

	(def room-join #Self,Direction,Room :: (
		(dict-set (dict-get Self exits) Direction (room-id Room))
		(dict-set (dict-get Room exits) (opposite Direction) (room-id Self))
	))
	(def room-border #Self,Direction :: (
		(if (room-is-exit Self Direction) (
			(room-exit Self Direction)
		) (else (
			(room-tile Self Direction)
		)))
	))
	(def room-is-exit #Self,Direction :: (
		(dict-present (room-exits Self) Direction)
	))
	(def room-exits #Self :: ((dict-get Self exits)))
	(def room-exit  #Self,Direction :: ((dict-get (room-exits Self) Direction)))
	(def room-arts  #Self :: ((dict-get Self art)))
	(def room-art   #Self,Direction :: (
		(var Arts (room-arts Self))
		(if (dict-present Arts Direction) (
			(dict-get Arts Direction)
		) (else (
			(".")
		)))
	))
	(def room-tile  #Self,Direction :: (
		(if (dict-present (room-exits Self) Direction) (
			(tile-art (room-exit Self Direction))
		) (else (
			(room-art Self Direction)
		)))
	))
	(def tile-art #Self,Direction :: (
		(dict-get Self art)
	))

	(def get-room (scope #Id :: ((dict-get Rooms Id))))

	(def room-id #Room :: ((dict-get Room id)))

	(def room-is-done #Self,Pos :: ((
		(dict-present (dict-get Self done) Pos)
	)))
	(def room-map-room #Self,Room,Pos :: ((room-map-room Self Room Pos nil)))
	(def room-map-room #Self,Room,Pos,Prev :: (
		(atom nil)
	))

	(var Initial (room (room-id) "Initial"))
	(room-join Initial north (room (room-id) "North"))
	(room-join Initial east  (room (room-id) "East"))
	(room-join Initial south (room (room-id) "South"))
	(room-join Initial west  (room (room-id) "West"))

	(print Initial)
)
